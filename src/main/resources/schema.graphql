scalar SimpleDateScalar

schema {
    query: Query
}

type Query {
	listQuestions(filter: QueFilter): [Question]!
	findAllProfiles: [Profile]!
	findAllLocations: [Location]
	countQuestions(id: Long!): Int!
	countProfiles: Long!
}

type Mutation {
  newProfile(email: String!, firstName: String!, lastName: String!): Profile!
  newQuestion(content: String!, answer: String!, authorId: Long!): Question!
  deleteQuestion(id: ID!): Int!
  updateQuestion(que: QueInput!): Question!
}

type Question {
    id: ID!
    content: String!
    createdBy: Profile!
    answer: Answer
}

type Profile {
	id: ID!
	firstName: String!
	lastName: String
	email: String!
}

type Answer {
	id: ID!
	content: String!
	reason: String
	reference: String
	points: Int
}

type Author {
  id: ID!
  firstName: String!
  lastName: String!
}

type Location {
	id: ID!
	city: String
	state: String
	zip: String
	country: String
}

input QueInput{
	content: String
    answer: String
}

input QueFilter{
	authorId: ID
	from: SimpleDateScalar
	until: SimpleDateScalar
	start: Int
	limit: Int
	content: String
}